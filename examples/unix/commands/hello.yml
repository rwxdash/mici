##  ==================================================
##  mici Command Template
##  A reference template for creating new commands
##  ==================================================

##  Schema Version
#
#   Must match supported version (currently "1.0")
#   version: "1.0"
#
version: "1.0"

##  Command Metadata
#
#   name: String          [Required] Human-readable command name
#   description: String   [Optional] Brief description of what this command does
#   usage: String         [Optional] Usage example showing how to invoke this command
#
name: "hello"
description: "A new mici command"
usage: "mici hello"

##  Command Configuration
#
#   configuration:
#     confirm: bool
#           [Optional]  default: false
#           Prompt for confirmation before running the command
#           On runtime, it'll accept any of the following inputs:
#               y | yes | true  | 1
#               n | no  | false | 0
#     environment: Map<String, String>
#           [Optional]  default: null
#           Environment variables to pass to all steps
#           These will override the OS environment variables if any name matches
#            Supports:
#              - Basic values: "SOME_VALUE"
#              - Input references: "@{inputs.force}"
#              - OS environment: "${MY_PRIVATE_TOKEN}"
#     working_directory: String
#           [Optional]  default: null
#           Working directory for command execution
#           Defaults to directory where command is invoked
#
configuration:
  confirm: false
  environment:
    VAR_ONE: "SOME_VALUE_123"
    VAR_TWO: "SOME_VALUE_123"
    IS_FORCED: "@{inputs.force}"
    TOKEN: "${MY_PRIVATE_TOKEN}"
  working_directory: null

##  Command Inputs
#
#   inputs:
#     ...
#     <input_key>:
#       type: String
#           [Required]
#           Input type: "string" | "choice" | "bool" or "boolean"
#       description: String
#           [Required]
#           Help text shown to user
#       options: Vec<String>
#           [Optional]  default: null
#           Array of valid choices
#           Only required and usable for "choice" type inputs
#       required: bool
#           [Optional]  default: false
#           Whether input must be provided
#       secret: bool
#           [Optional]  default: false
#           Hides value in logs/output
#       short: String
#           [Optional]  default: null
#           Short flag format (e.g., "-n")
#       long: String
#           [Optional]  default: "--<input_key>"
#           Long flag format (e.g., "--name")
#       default: String
#           [Optional]  default: null
#           Default value for the input if not provided
#
inputs:
  name:
    type: string
    description: "A name to say hello to!"
    required: true
    secret: false
    short: -n
    long: --name
    default: "World"
  force:
    type: boolean
    description: "Run this with force, maybe?"
    short: -f
    long: --force
  environment:
    type: choice
    description: "Environment to run this!"
    options:
      - staging
      - production
    required: false
    secret: false
    short: -e
    long: --environment
    default: "production"

##  Command Steps
#
#   steps:
#     ...
#     - id: String
#           [Required]
#           Unique identifier for the step
#           No whitespace allowed
#       name: String
#           [Optional]  default: null
#           Human-readable step description
#       when: String
#           [Optional]  default: null
#           Conditional expression to control the step execution
#       run:
#         shell: String
#           [Optional]  default: OS default shell
#           Shell to execute command (e.g., "bash", "powershell")
#         environment: Map<String, String>
#           [Optional]  default: null
#           Override configuration.environment for this step only
#           Supports same syntax as configuration.environment
#         working_directory: String
#           [Optional]  default: configuration.working_directory
#           Override working directory for this step only
#         command: String
#           [Required if no script]
#           Inline command/script to execute
#         script: String
#           [Required if no command]
#           Path to external script file
#         args: List | Map
#           [Optional]  default: null
#           Arguments passed to command/script
#           Formats:
#             - List: ["arg1", "arg2", "arg3"]
#             - Map: {"key1": "value1", "key2": "@{inputs.name}"}
#
steps:
  - id: "say_hello"
    name: "Say hello on terminal"
    run:
      shell: "bash"
      working_directory: null
      environment:
        VAR_TWO: "ANOTHER_VALUE_456"
      command: |
        echo "Hello, @{inputs.name}!"
